#include<iostream>
#include<bits/stdc++.h>
using namespace std;

class TreeNode{
	int data;
	TreeNode* left,right;
	
	TreeNode(){
		data=0;
		left=right=NULL;
	}
	TreeNode(int x){
		data=x;
		left=right=NULL;
	}
	TreeNode(int data,TreeNode*left,TreeNode*right){
		this->data=data;
		this->left=left;
		this->right=right;
	}
};

/* 	Inorder     Traversal 		*/

vector<int>Inorder(TreeNode* root){
	vector<int>ans;
	InorderTraversal(root,ans);
	return ans;
}
void InorderTraversal(TreeNode* root,vector<int>&ans){
	
	if(root==NULL){
		return ;
	}
	InorderTraversal(root->left,ans);
	arr.push_back(root->data);
	InorderTraversal(root->right,ans);

	
}


// Build Tree
TreeNode* BuildTree(vector<int>arr){
	if(arr.size()<=0) return NULL;

	//create root
        TreeNode* root=new TreeNode(arr[0]); 
	
	//initial queue init and pass root in it
	queue<TreeNode*>q;
	q.push(root);
	
	
	for(int i=1;i<arr.size();i++){
		TreeNode* curr=q.top();
		q.pop();
		if(curr!=NULL && i<arr.size()){
			curr->left=new TreeNode(arr[i]);
			i++;
			q.push(curr->left);
		}
		if(curr!=NULL && i<arr.size()){
			curr->right=new TreeNode(arr[i]);
			q.push(curr->right);
		}

	}
	return root;
}

//main
int main(){
	// array i/p
	int n;
	cin>>n;
	vector<int>arr;
	
	for(int i=0;i<n;i++){
		cin>>arr[i];
	}
	TreeNode* root=BuildTree(arr);
	InorderTraversal(root);
	for(int j=0;j<n;j++){
		cout<<j<<endl;
	}
	return 0;
}

