#include<iostream>
#include<bits/stdc++.h>
using namespace std;


class Node{
	public:
	int data;
	Node* left;
	node* right;
	public:
	Node(int x){
		this->data=x;
		this->left=NULL;
		this->right=NULL;
	}
};

// Inorder
vector<int> InorderItr(Node* root){
	stack<int>st;
	vector<int>ans;
	Node* node=root;
	while(true){
		if(node!=NULL){
			st.push(node);
			node=node->left;
		}
		
		else{
			if(st.empty()==true) break;
			node=st.top();			
			st.pop();
			ans.push_back(node->data);
			//right
			node=node->right;
		}
	}
	return ans;	
	
}

//build tree
Node* buildTree(vector<string>arr){
	if(arr.size()<=0 || arr[0]="null") return NULL;
	
	Node* root=new Node(stoi(arr[0]);
	queue<Node*>q;
	queue.push(root);

	int i=1
	while(i<arr.size()){
		Node* curr=q,front();
		q.pop();
		if(i<arr.size() && arr[i]!="null"){
			curr->left=new Node(stoi(arr[i]);
			q.push(curr->left);
		}
		i++;
		if(i<arr.size() && arr[i]!="null"){
			curr->right=new Node(stoi(arr[i]);
			q.push(curr->right);
		}
		i++;
	}
	return root;
			
}
	

//main
int main(){
	int n;
	cin>>n;
	vector<string>arr;
	for(int i=0;i<n;i++){
		string x;
		cin>>x;
		arr.push_back(x);
	}
	Node* root=buildTree(arr);
	vector<int>Inorderres=Inorder(root);
	for(int j=0;j<Inorderres.size();j++){
		cout<<Inorderres(j);
	}
	return 0;
}

